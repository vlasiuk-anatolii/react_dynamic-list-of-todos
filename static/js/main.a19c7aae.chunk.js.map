{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Selected","TodoList","allTodos","setSelectedUserId","selectedUserId","useState","All","selectedSelect","setSelectedSelect","currentValue","setCurrentValue","className","type","placeholder","value","onChange","event","target","filteredTodos","filter","todo","title","includes","Active","completed","Complited","prepearedTodos","map","classnames","checked","userId","onClick","id","API_URL","a","fetch","response","json","CurrentUser","selectUser","user","setUser","error","setError","useEffect","getUser","then","userFromServer","catch","name","email","phone","App","todos","setTodos","console","log","getTodos","todosFromServer","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a19c7aae.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\nenum Selected {\n  All,\n  Active,\n  Complited,\n}\n\ninterface Props {\n  allTodos: Todo[];\n  setSelectedUserId: (id: number) => void;\n  selectedUserId: number;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  allTodos,\n  setSelectedUserId,\n  selectedUserId,\n}) => {\n  const [selectedSelect, setSelectedSelect] = useState(Selected.All);\n  const [currentValue, setCurrentValue] = useState('');\n\n  const prepearedTodos = () => {\n    const filteredTodos = allTodos.filter(todo => {\n      return todo.title.includes(currentValue);\n    });\n\n    switch (+selectedSelect) {\n      case Selected.Active:\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case Selected.Complited:\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <div className=\"d\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={currentValue}\n            data-cy=\"filterByTitle\"\n            onChange={(event) => {\n              setCurrentValue(event.target.value);\n            }}\n          />\n          {' '}\n          <select\n            onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\n              setSelectedSelect(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All</option>\n            <option value=\"1\">Active</option>\n            <option value=\"2\">Complited</option>\n          </select>\n        </div>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {prepearedTodos().map(todo => (\n            <li\n              className={classnames(\n                'TodoList__item',\n                'TodoList__item--unchecked',\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'button',\n                  'TodoList__user-button',\n                  // eslint-disable-next-line max-len\n                  { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  setSelectedUserId(todo.userId);\n                }}\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import './CurrentUser.scss';\nimport React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      })\n      .catch(() => {\n        setError('User is not exist');\n      });\n  }, [userId]);\n\n  if (!user) {\n    return <span>{error}</span>;\n  }\n\n  return (\n    <>\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user?.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => selectUser(0)}\n          className=\"CurrentUser__clear\"\n        >\n          Clear\n        </button>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState('');\n\n  // eslint-disable-next-line no-console\n  console.log(todos);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      })\n      .catch(() => {\n        setError('Todo is not exist');\n      });\n  }, []);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      {error.length === 0\n        ? (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                allTodos={todos}\n                selectedUserId={selectedUserId}\n                setSelectedUserId={setSelectedUserId}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                {selectedUserId ? (\n                  <CurrentUser\n                    userId={selectedUserId}\n                    selectUser={selectUser}\n                  />\n                ) : 'No user selected'}\n              </div>\n            </div>\n\n          </>\n        ) : (<span>{error}</span>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}