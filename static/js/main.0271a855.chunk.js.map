{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","alltodos","setSelectedUserId","selectedUserId","useState","selectedselect","setSelectedselect","currentvalue","setCurrentValue","className","type","placeholder","value","onChange","event","target","filteredTodos","filter","todo","title","includes","completed","prepearedTodos","map","checked","userId","onClick","id","API_URL","a","fetch","response","json","CurrentUser","selectUser","user","setUser","error","setError","useEffect","getUser","then","userFromServer","catch","name","email","phone","App","todos","setTodos","console","log","getTodos","todosFromServer","length","ReactDOM","render","document","getElementById"],"mappings":"uSASaA,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,eAEA,EAA4CC,mBAAS,OAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAmBA,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UAEE,sBAAKA,UAAU,IAAf,UACE,uBACEC,KAAK,OACLC,YAAY,kBACZC,MAAOL,EACP,UAAQ,gBACRM,SAAU,SAACC,GACTN,EAAgBM,EAAMC,OAAOH,UAGhC,IACD,yBACEC,SAAU,SAACC,GACTR,EAAkBQ,EAAMC,OAAOH,QAFnC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,6BAIJ,oBACEH,UAAU,iBACV,UAAQ,cAFV,SA7CiB,WACrB,IAAMO,EAAgBf,EAASgB,QAAO,SAAAC,GACpC,OAAOA,EAAKC,MAAMC,SAASb,MAG7B,OAAQF,GACN,IAAK,SACH,OAAOW,EAAcC,QAAO,qBAAGI,aAEjC,IAAK,YACH,OAAOL,EAAcC,QAAO,qBAAGI,aAEjC,QACE,OAAOL,GAoCJM,GAAiBC,KAAI,SAAAL,GAAI,OACxB,qBACET,UAAWS,EAAKG,UACZ,yCACA,2CAHN,UAME,kCACE,uBACEX,KAAK,WACLc,QAASN,EAAKG,YAEhB,4BAAIH,EAAKC,WAGX,wBACEV,UAAWN,IAAmBe,EAAKO,OAC/B,yCACA,+BACJf,KAAK,SACL,UAAQ,aACRgB,QAAS,WACPxB,EAAkBgB,EAAKO,SAP3B,wBAUWP,EAAKO,YApBXP,EAAKS,gB,+BCvElBC,EAAU,oC,4CAET,4BAAAC,EAAA,sEACkBC,MAAM,GAAD,OAAIF,EAAJ,WADvB,cACCG,EADD,yBAGEA,EAASC,QAHX,4C,kEAMA,WAAuBP,GAAvB,eAAAI,EAAA,sEACkBC,MAAM,GAAD,OAAIF,EAAJ,kBAAqBH,IAD5C,cACCM,EADD,yBAGEA,EAASC,QAHX,4C,sBCCA,IAAMC,EAA+B,SAAC,GAA4B,IAA1BR,EAAyB,EAAzBA,OAAQS,EAAiB,EAAjBA,WACrD,EAAwB9B,mBAAsB,MAA9C,mBAAO+B,EAAP,KAAaC,EAAb,KACA,EAA0BhC,mBAAS,IAAnC,mBAAOiC,EAAP,KAAcC,EAAd,KAYA,OAVAC,qBAAU,YDLL,SAAP,mCCMIC,CAAQf,GACLgB,MAAK,SAAAC,GACJN,EAAQM,MAETC,OAAM,WACLL,EAAS,0BAEZ,CAACb,IAGF,mCACGU,EACC,sBAAK1B,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyB0B,EAAKR,QAGhC,oBAAIlB,UAAU,oBAAoB,UAAQ,WAA1C,SAAsD0B,EAAKS,OAC3D,mBAAGnC,UAAU,qBAAb,SAAmC0B,EAAKU,QACxC,mBAAGpC,UAAU,qBAAb,SAAmC0B,EAAKW,QAExC,wBACEpC,KAAK,SACLgB,QAAS,kBAAMQ,EAAW,IAC1BzB,UAAU,qBAHZ,sBAQC,+BAAO4B,OCgBHU,EApDO,WACpB,MAA4C3C,mBAAS,GAArD,mBAAOD,EAAP,KAAuBD,EAAvB,KACA,EAA0BE,mBAAiB,IAA3C,mBAAO4C,EAAP,KAAcC,EAAd,KACA,EAA0B7C,mBAAS,IAAnC,mBAAOiC,EAAP,KAAcC,EAAd,KAGAY,QAAQC,IAAIH,GAEZT,qBAAU,YFbL,WAAP,gCEcIa,GACGX,MAAK,SAAAY,GACJJ,EAASI,MAEVV,OAAM,WACLL,EAAS,0BAEZ,IAMH,OACE,qBAAK7B,UAAU,MAAf,SACoB,IAAjB4B,EAAMiB,OAEH,qCACE,qBAAK7C,UAAU,eAAf,SACE,cAAC,EAAD,CACER,SAAU+C,EACV7C,eAAgBA,EAChBD,kBAAmBA,MAIvB,qBAAKO,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGN,EACC,cAAC,EAAD,CACEsB,OAAQtB,EACR+B,WAtBC,SAACT,GAClBvB,EAAkBuB,MAuBF,0BAKP,+BAAOY,OCnDpBkB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0271a855.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  alltodos: Todo[];\n  setSelectedUserId: (id: number) => void;\n  selectedUserId: number;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  alltodos,\n  setSelectedUserId,\n  selectedUserId,\n}) => {\n  const [selectedselect, setSelectedselect] = useState('All');\n  const [currentvalue, setCurrentValue] = useState('');\n\n  const prepearedTodos = () => {\n    const filteredTodos = alltodos.filter(todo => {\n      return todo.title.includes(currentvalue);\n    });\n\n    switch (selectedselect) {\n      case 'active':\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case 'complited':\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <div className=\"d\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={currentvalue}\n            data-cy=\"filterByTitle\"\n            onChange={(event) => {\n              setCurrentValue(event.target.value);\n            }}\n          />\n          {' '}\n          <select\n            onChange={(event) => {\n              setSelectedselect(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"complited\">Complited</option>\n          </select>\n        </div>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {prepearedTodos().map(todo => (\n            <li\n              className={todo.completed\n                ? 'TodoList__item--checked TodoList__item'\n                : 'TodoList__item--unchecked TodoList__item'}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={selectedUserId === todo.userId\n                  ? 'TodoList__user-button--selected button'\n                  : 'TodoList__user-button button'}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  setSelectedUserId(todo.userId);\n                }}\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import './CurrentUser.scss';\nimport React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      })\n      .catch(() => {\n        setError('User is not exist');\n      });\n  }, [userId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => selectUser(0)}\n            className=\"CurrentUser__clear\"\n          >\n            Clear\n          </button>\n        </div>\n      ) : (<span>{error}</span>)}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState('');\n\n  // eslint-disable-next-line no-console\n  console.log(todos);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      })\n      .catch(() => {\n        setError('Todo is not exist');\n      });\n  }, []);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      {error.length === 0\n        ? (\n          <>\n            <div className=\"App__sidebar\">\n              <TodoList\n                alltodos={todos}\n                selectedUserId={selectedUserId}\n                setSelectedUserId={setSelectedUserId}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                {selectedUserId ? (\n                  <CurrentUser\n                    userId={selectedUserId}\n                    selectUser={selectUser}\n                  />\n                ) : 'No user selected'}\n              </div>\n            </div>\n\n          </>\n        ) : (<span>{error}</span>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}